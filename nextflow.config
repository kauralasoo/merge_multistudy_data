singularity {
  enabled = true
  autoMounts = true
  cacheDir = "$baseDir/singularity_img/"
}

process {
  errorStrategy = { task.exitStatus in [143,137,104,134,139] ? 'retry' : 'finish' }
  maxRetries = 3
  maxErrors = '-1'
  queue = 'amd'
}

params {
  studyFile = "${projectDir}/vcfs.tsv"
  cell_type = "LCL"
  outdir = "results/"
}

executor {
  name = 'slurm'
  queueSize = 50
  submitRateLimit = 1
}

process {
  executor = 'slurm'
  queue = 'amd'
  beforeScript = 'module load singularity/3.5.3'
}

includeConfig 'conf/base.config'

profiles {
  tartu_hpc { includeConfig 'conf/tartu_hpc.config'}
  debug { process.beforeScript = 'echo $HOSTNAME' }
}

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
  if(type == 'memory'){
    try {
      if(obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
      return obj
    }
  } else if(type == 'time'){
    try {
      if(obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
        return params.max_time as nextflow.util.Duration
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
      return obj
    }
  } else if(type == 'cpus'){
    try {
      return Math.min( obj, params.max_cpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
      return obj
    }
  }
}
